

# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# '.editor':
#   'enter': 'editor:newline'
#
# '.workspace':
#   'ctrl-P': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
'.workspace .editor:not(.mini)':
  'cmd-d': 'editor:duplicate-lines'

'body':
  #'shift-cmd-W': 'pane:close-other-items'
  'ctrl-w': 'pane:close-other-items'
  #'alt-cmd-w': 'window:close'
'.editor':
  'cmd-space': 'autocomplete:toggle'
  'ctrl-shift-W': 'pane:close-other-items'

# swap
'.platform-darwin .editor':
  'cmd-p': 'symbols-view:toggle-file-symbols'

'.platform-darwin':
  'cmd-r': 'fuzzy-finder:toggle-file-finder'

'.platform-darwin .editor':
  'cmd-r': 'fuzzy-finder:toggle-file-finder'

'.platform-darwin, .platform-darwin .command-palette .editor':
  'ctrl-[': 'command-palette:toggle' #default shift-cmd-P

'.editor':
  'cmd-alt-r': 'rails-rspec:toggle-spec-file'

'.autocomplete-plus input.hidden-input':
  'enter': 'autocomplete-plus:confirm'

'atom-workspace atom-text-editor:not([mini])':
  'alt-shift-up': 'editor:add-selection-above'

'atom-workspace atom-text-editor:not([mini])':
  'alt-shift-down': 'editor:add-selection-below'